// 5x7 font: each letter is 7 strings of 5 chars: '#' for filled, '.' for empty
export const FONT: Record<string, string[]> = {
  A: [".###.", "#...#", "#...#", "#####", "#...#", "#...#", "#...#"],
  B: ["####.", "#...#", "#...#", "####.", "#...#", "#...#", "####."],
  C: [".###.", "#...#", "#....", "#....", "#....", "#...#", ".###."],
  D: ["####.", "#...#", "#...#", "#...#", "#...#", "#...#", "####."],
  E: ["#####", "#....", "#....", "###..", "#....", "#....", "#####"],
  F: ["#####", "#....", "#....", "###..", "#....", "#....", "#...."],
  G: [".###.", "#...#", "#....", "#.###", "#...#", "#...#", ".###."],
  H: ["#...#", "#...#", "#...#", "#####", "#...#", "#...#", "#...#"],
  I: ["#####", "..#..", "..#..", "..#..", "..#..", "..#..", "#####"],
  J: ["..###", "...#.", "...#.", "...#.", "#..#.", "#..#.", ".##.."],
  K: ["#...#", "#..#.", "#.#..", "##...", "#.#..", "#..#.", "#...#"],
  L: ["#....", "#....", "#....", "#....", "#....", "#....", "#####"],
  M: ["#...#", "##.##", "#.#.#", "#...#", "#...#", "#...#", "#...#"],
  N: ["#...#", "##..#", "#.#.#", "#..##", "#...#", "#...#", "#...#"],
  O: [".###.", "#...#", "#...#", "#...#", "#...#", "#...#", ".###."],
  P: ["####.", "#...#", "#...#", "####.", "#....", "#....", "#...."],
  Q: [".###.", "#...#", "#...#", "#.#.#", "#..##", ".###.", "....#"],
  R: ["####.", "#...#", "#...#", "####.", "#.#..", "#..#.", "#...#"],
  S: [".###.", "#...#", "#....", ".###.", "....#", "#...#", ".###."],
  T: ["#####", "..#..", "..#..", "..#..", "..#..", "..#..", "..#.."],
  U: ["#...#", "#...#", "#...#", "#...#", "#...#", "#...#", ".###."],
  V: ["#...#", "#...#", "#...#", "#...#", ".#.#.", ".#.#.", "..#.."],
  W: ["#...#", "#...#", "#...#", "#.#.#", "#.#.#", "##.##", "#...#"],
  X: ["#...#", ".#.#.", "..#..", "..#..", ".#.#.", "#...#", "#...#"],
  Y: ["#...#", ".#.#.", "..#..", "..#..", "..#..", "..#..", "..#.."],
  Z: ["#####", "....#", "...#.", "..#..", ".#...", "#....", "#####"],
  " ": [".....", ".....", ".....", ".....", ".....", ".....", "....."],
  "0": [".###.", "#...#", "#..##", "#.#.#", "##..#", "#...#", ".###."],
  "1": ["..#..", ".##..", "..#..", "..#..", "..#..", "..#..", ".###."],
  "2": [".###.", "#...#", "....#", "...#.", "..#..", ".#...", "#####"],
  "3": [".###.", "#...#", "....#", "..##.", "....#", "#...#", ".###."],
  "4": ["...#.", "..##.", ".#.#.", "#..#.", "#####", "...#.", "...#."],
  "5": ["#####", "#....", "####.", "....#", "....#", "#...#", ".###."],
  "6": [".###.", "#....", "#....", "####.", "#...#", "#...#", ".###."],
  "7": ["#####", "....#", "...#.", "..#..", ".#...", ".#...", ".#..."],
  "8": [".###.", "#...#", "#...#", ".###.", "#...#", "#...#", ".###."],
  "9": [".###.", "#...#", "#...#", ".####", "....#", "....#", ".###."],
  "!": ["..#..", "..#..", "..#..", "..#..", ".....", "..#..", "....."],
  ".": [".....", ".....", ".....", ".....", ".....", "..#..", "....."],
  "?": [".###.", "#...#", "....#", "..##.", "..#..", ".....", "..#.."],
  "@": [".###.", "#...#", "#.###", "#.#.#", "#.###", "#....", ".###."],
  "#": [".#.#.", "#####", ".#.#.", "#####", ".#.#.", "#####", ".#.#."],
  "&": [".##..", "#..#.", ".##..", "#.##.", "#..#.", "#..##", ".##.#"],
  "*": [".....", "..#..", "#.#.#", ".###.", "#.#.#", "..#..", "....."],
  "+": [".....", "..#..", "..#..", "#####", "..#..", "..#..", "....."],
  "-": [".....", ".....", ".....", "#####", ".....", ".....", "....."],
  "=": [".....", ".....", "#####", ".....", "#####", ".....", "....."],
  "/": ["....#", "...#.", "..#..", "..#..", ".#...", "#....", "#...."],
  "\\": ["#....", ".#...", "..#..", "..#..", "...#.", "....#", "....#"],
  "|": ["..#..", "..#..", "..#..", "..#..", "..#..", "..#..", "..#.."],
  "(": ["...#.", "..#..", ".#...", ".#...", ".#...", "..#..", "...#."],
  ")": [".#...", "..#..", "...#.", "...#.", "...#.", "..#..", ".#..."],
  "[": ["..###", "..#..", "..#..", "..#..", "..#..", "..#..", "..###"],
  "]": ["###..", "..#..", "..#..", "..#..", "..#..", "..#..", "###.."],
  "<": ["....#", "...#.", "..#..", ".#...", "..#..", "...#.", "....#"],
  ">": ["#....", ".#...", "..#..", "...#.", "..#..", ".#...", "#...."],
  "^": ["..#..", ".#.#.", "#...#", ".....", ".....", ".....", "....."],
  _: [".....", ".....", ".....", ".....", ".....", ".....", "#####"],
  "~": [".....", ".....", ".##.#", "#.##.", ".....", ".....", "....."],
  "`": [".#...", "..#..", ".....", ".....", ".....", ".....", "....."],
  "'": ["..#..", "..#..", ".....", ".....", ".....", ".....", "....."],
  '"': [".#.#.", ".#.#.", ".....", ".....", ".....", ".....", "....."],
  ":": [".....", "..#..", ".....", ".....", ".....", "..#..", "....."],
  ";": [".....", "..#..", ".....", ".....", "..#..", ".#...", "....."],
  ",": [".....", ".....", ".....", ".....", "..#..", ".#...", "....."],
}

function scaleRow(row: string, scale: number): string {
  return row
    .split("")
    .map((ch) => ch.repeat(scale))
    .join("")
}

function scaleFont(letterRows: string[], scale: number): string[] {
  const scaled: string[] = []
  for (const row of letterRows) {
    const scaledRow = scaleRow(row, scale)
    for (let i = 0; i < scale; i++) {
      scaled.push(scaledRow)
    }
  }
  return scaled
}

export function textToMatrix(text: string, spacing = 1, scale = 1, padTop = 0, padBottom = 0): string {
  const upperText = text.toUpperCase()
  const letters: string[][] = []

  // Prepare scaled letters
  for (const ch of upperText) {
    if (ch in FONT) {
      letters.push(scaleFont(FONT[ch], scale))
    } else {
      // Unknown char -> substitute with blank same-size
      const blank = Array(7 * scale).fill(".".repeat(5 * scale))
      letters.push(blank)
    }
  }

  if (letters.length === 0) {
    return ""
  }

  // Height of the output
  const height = letters[0].length // 7*scale

  // Build lines
  const lines: string[] = []
  for (let row = 0; row < height; row++) {
    const lineParts: string[] = []
    for (let i = 0; i < letters.length; i++) {
      lineParts.push(letters[i][row])
      if (i !== letters.length - 1) {
        lineParts.push(".".repeat(spacing * scale))
      }
    }
    lines.push(lineParts.join(""))
  }

  // Add top/bottom padding rows if requested
  const padRow = lines.length > 0 ? ".".repeat(lines[0].length) : ""
  for (let i = 0; i < padTop; i++) {
    lines.unshift(padRow)
  }
  for (let i = 0; i < padBottom; i++) {
    lines.push(padRow)
  }

  return lines.join("\n")
}
